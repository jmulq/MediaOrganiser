// <auto-generated />
using MediaOrganiser.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MediaOrganiser.Migrations
{
    [DbContext(typeof(MediaOrganiserContext))]
    [Migration("20190220135553_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaOrganiser.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MediaOrganiser.Models.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<byte[]>("FilePath");

                    b.Property<int>("MediaTypeId");

                    b.Property<string>("Name");

                    b.Property<byte>("SizeMB");

                    b.Property<byte[]>("Thumbnail");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("MediaOrganiser.Models.MediaFileCategory", b =>
                {
                    b.Property<int>("MediaFileId");

                    b.Property<int>("CategoryId");

                    b.HasKey("MediaFileId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MediaFileCategories");
                });

            modelBuilder.Entity("MediaOrganiser.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MediaTypeName");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("MediaOrganiser.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediaOrganiser.Models.MediaFile", b =>
                {
                    b.HasOne("MediaOrganiser.Models.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaOrganiser.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaOrganiser.Models.MediaFileCategory", b =>
                {
                    b.HasOne("MediaOrganiser.Models.Category", "Category")
                        .WithMany("MediaFiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MediaOrganiser.Models.MediaFile", "MediaFile")
                        .WithMany("Categories")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
